---
const { lang = 'zh-tw' } = Astro.props;

const getPath = (path: string) => {
  if (lang === 'zh-tw') return path;
  return `/${lang}${path}`;
};

const navItems = {
  'zh-tw': {
    books: '書籍',
    news: '資訊',
    about: '關於我們',
    submit: '學者投稿'
  },
  'zh-cn': {
    books: '书籍',
    news: '资讯',
    about: '关于我们',
    submit: '学者投稿'
  },
  ja: {
    books: '書籍',
    news: 'ニュース',
    about: '会社概要',
    submit: '投稿案内'
  },
  en: {
    books: 'Books',
    news: 'News',
    about: 'About',
    submit: 'Submit'
  }
};

const currentNav = navItems[lang] || navItems['zh-tw'];
---

<header class="border-b bg-white relative">
  <div class="container flex items-center justify-between h-20">
    <!-- Logo -->
    <a href={getPath('/')} class="flex items-center gap-2 z-50 relative">
      <img src="/images/brand/logo.png" alt="時代社 JIDAISYA" class="h-16 w-auto" />
      <span class="font-semibold text-[18px] text-[color:var(--brand-primary)] block sm:inline">
        <span class="block sm:inline">時代社</span>
        <span class="hidden sm:inline"> JIDAISYA</span>
      </span>
    </a>

    <!-- Desktop Navigation -->
    <nav class="hidden md:flex gap-6 text-sm">
      <a href={getPath('/books')} class="hover:text-blue-600 transition-colors">{currentNav.books}</a>
      <a href={getPath('/news')} class="hover:text-blue-600 transition-colors">{currentNav.news}</a>
      <a href={getPath('/about')} class="hover:text-blue-600 transition-colors">{currentNav.about}</a>
      <a href={getPath('/submit')} class="hover:text-blue-600 transition-colors">{currentNav.submit}</a>
    </nav>

    <!-- Language Switcher & Mobile Menu Button -->
    <div class="flex items-center gap-2">
      <!-- Language Switcher -->
      <div class="hidden sm:flex items-center gap-1">
        <a class={`text-sm px-3 py-1 rounded transition-colors min-w-[50px] text-center ${lang === 'zh-tw' ? 'bg-blue-600 text-white' : 'border hover:bg-gray-50'}`} href="/">TW</a>
        <a class={`text-sm px-3 py-1 rounded transition-colors min-w-[50px] text-center ${lang === 'zh-cn' ? 'bg-blue-600 text-white' : 'border hover:bg-gray-50'}`} href="/zh-cn">CN</a>
        <a class={`text-sm px-3 py-1 rounded transition-colors min-w-[50px] text-center ${lang === 'ja' ? 'bg-blue-600 text-white' : 'border hover:bg-gray-50'}`} href="/ja">JP</a>
        <a class={`text-sm px-3 py-1 rounded transition-colors min-w-[50px] text-center ${lang === 'en' ? 'bg-blue-600 text-white' : 'border hover:bg-gray-50'}`} href="/en">EN</a>
      </div>

      <!-- Mobile Menu Button -->
      <button
        id="mobile-menu-button"
        class="md:hidden p-2 rounded-md hover:bg-gray-100 transition-colors z-50 relative"
        aria-label="Toggle mobile menu"
        aria-expanded="false"
      >
        <svg id="menu-icon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
        <svg id="close-icon" class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
  </div>

  <!-- Mobile Navigation Menu -->
  <nav 
    id="mobile-menu" 
    class="md:hidden absolute top-full left-0 right-0 bg-white border-b shadow-lg transform -translate-y-full opacity-0 invisible transition-all duration-300 ease-in-out z-40"
    aria-hidden="true"
  >
    <div class="container py-4 space-y-4">
      <!-- Mobile Navigation Links -->
      <div class="space-y-3">
        <a href={getPath('/books')} class="block py-2 px-4 text-lg hover:bg-gray-50 rounded-md transition-colors">{currentNav.books}</a>
        <a href={getPath('/news')} class="block py-2 px-4 text-lg hover:bg-gray-50 rounded-md transition-colors">{currentNav.news}</a>
        <a href={getPath('/about')} class="block py-2 px-4 text-lg hover:bg-gray-50 rounded-md transition-colors">{currentNav.about}</a>
        <a href={getPath('/submit')} class="block py-2 px-4 text-lg hover:bg-gray-50 rounded-md transition-colors">{currentNav.submit}</a>
      </div>
      
      <!-- Mobile Language Switcher -->
      <div class="border-t pt-4">
        <p class="px-4 text-sm text-gray-600 mb-3">Language / 語言</p>
        <div class="grid grid-cols-2 gap-2 px-4">
          <a class={`text-sm px-3 py-2 rounded text-center transition-colors ${lang === 'zh-tw' ? 'bg-blue-600 text-white' : 'border hover:bg-gray-50'}`} href="/">繁體中文</a>
          <a class={`text-sm px-3 py-2 rounded text-center transition-colors ${lang === 'zh-cn' ? 'bg-blue-600 text-white' : 'border hover:bg-gray-50'}`} href="/zh-cn">简体中文</a>
          <a class={`text-sm px-3 py-2 rounded text-center transition-colors ${lang === 'ja' ? 'bg-blue-600 text-white' : 'border hover:bg-gray-50'}`} href="/ja">日本語</a>
          <a class={`text-sm px-3 py-2 rounded text-center transition-colors ${lang === 'en' ? 'bg-blue-600 text-white' : 'border hover:bg-gray-50'}`} href="/en">English</a>
        </div>
      </div>
    </div>
  </nav>
</header>

<script>
  // Mobile menu functionality with touch support
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');
    
    if (!mobileMenuButton || !mobileMenu || !menuIcon || !closeIcon) {
      console.warn('Mobile menu elements not found');
      return;
    }
    
    let isMenuOpen = false;
    
    const toggleMenu = (event) => {
      // Prevent default to avoid any interference
      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }
      
      isMenuOpen = !isMenuOpen;
      
      if (isMenuOpen) {
        // Open menu
        mobileMenu.classList.remove('-translate-y-full', 'opacity-0', 'invisible');
        mobileMenu.classList.add('translate-y-0', 'opacity-100', 'visible');
        menuIcon.classList.add('hidden');
        closeIcon.classList.remove('hidden');
        mobileMenuButton.setAttribute('aria-expanded', 'true');
        mobileMenu.setAttribute('aria-hidden', 'false');
        
        // Prevent scroll when menu is open
        document.body.style.overflow = 'hidden';
      } else {
        // Close menu
        mobileMenu.classList.add('-translate-y-full', 'opacity-0', 'invisible');
        mobileMenu.classList.remove('translate-y-0', 'opacity-100', 'visible');
        menuIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
        mobileMenuButton.setAttribute('aria-expanded', 'false');
        mobileMenu.setAttribute('aria-hidden', 'true');
        
        // Restore scroll
        document.body.style.overflow = '';
      }
    };
    
    // Add both click and touch event listeners for mobile compatibility
    // Prevent double events on devices that support both touch and mouse
    let touchStartTime = 0;
    
    mobileMenuButton.addEventListener('touchstart', (e) => {
      touchStartTime = Date.now();
      toggleMenu(e);
    }, { passive: false });
    
    mobileMenuButton.addEventListener('click', (e) => {
      // If touch event just happened, ignore click to prevent double trigger
      if (Date.now() - touchStartTime < 300) {
        return;
      }
      toggleMenu(e);
    });
    
    // Close menu when clicking/touching on a link
    mobileMenu.addEventListener('click', (e) => {
      if (e.target && e.target.tagName === 'A') {
        toggleMenu(e);
      }
    });
    
    mobileMenu.addEventListener('touchstart', (e) => {
      if (e.target && e.target.tagName === 'A') {
        toggleMenu(e);
      }
    }, { passive: false });
    
    // Close menu on window resize to desktop size
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 768 && isMenuOpen) {
        toggleMenu();
      }
    });
    
    // Close menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isMenuOpen) {
        toggleMenu(e);
      }
    });
    
    // Debug: Log when script loads
    console.log('Mobile menu script loaded successfully');
  });
</script>